openapi: 3.0.3
info:
  title: Service API
  version: 1.0.0
  description: API for service management and retrieval
security:
  - BearerAuth: []
servers:
  - url: 'http://localhost:80/api/v1'
    description: Local development server
  - url: 'http://65.0.253.148:80/api/v1'
    description: Production server
tags:
  - name: Auth
    description: Authentication management
  - name: Categories
    description: Category management
  - name: Service
    description: Service management and retrieval
  - name: User
    description: User management and retrieval
  - name: ProviderApplication
    description: Provider application management
  - name: LocationImport
    description: Location import management
  - name: ServiceArea
    description: Service area management
paths:
  /services:
    get:
      summary: Get all services with optional filters
      tags:
        - Service
      parameters:
        - in: query
          name: title
          schema:
            type: string
          description: Search services by title (case-insensitive)
        - in: query
          name: categoryId
          schema:
            type: string
          description: The ObjectId of the category
        - in: query
          name: minPrice
          schema:
            type: number
          description: Minimum price
        - in: query
          name: maxPrice
          schema:
            type: number
          description: Maximum price
        - in: query
          name: avgRating
          schema:
            type: number
          description: Minimum average rating
        - in: query
          name: isFeatured
          schema:
            type: boolean
          description: Filter for featured services
        - in: query
          name: cityId
          schema:
            type: string
          description: Filter by city ObjectId
        - in: query
          name: areaId
          schema:
            type: string
          description: Filter by area ObjectId
        - in: query
          name: pincode
          schema:
            type: number
          description: Filter by pincode
      responses:
        '200':
          description: Services retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      $ref: '#/paths/~1services~1%7BserviceId%7D/get/responses/200/content/application~1json/schema/properties/data'
                  message:
                    type: string
                    example: Services retrieved successfully
    post:
      summary: Create a new service
      tags:
        - Service
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - title
                - description
                - category
                - pricingOptions
              properties:
                title:
                  type: string
                  example: Home Cleaning
                description:
                  type: string
                  example: Professional home cleaning service
                category:
                  type: string
                  example: 60f7c0b8e1b1c8a1b8e1b1c8
                pricingOptions:
                  type: string
                  description: |
                    JSON stringified array of pricing options.   Example: '[{"label":"1 BHK","price":1000,"duration":60}]'
                image:
                  type: string
                  format: binary
                media:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: Service created successfully
  /services/featured-services:
    get:
      summary: Get featured services
      tags:
        - Service
      responses:
        '200':
          description: Featured services retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/paths/~1services~1%7BserviceId%7D/get/responses/200/content/application~1json/schema/properties/data'
                  message:
                    type: string
  '/services/{serviceId}':
    get:
      summary: Get service by ID
      tags:
        - Service
      parameters:
        - in: path
          name: serviceId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Service retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    Service:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: 507f1f77bcf86cd799439011
                        title:
                          type: string
                          maxLength: 100
                          example: Home Cleaning Service
                        description:
                          type: string
                          example: Professional home cleaning with eco-friendly products
                        category:
                          type: string
                          example: 60f7c0b8e1b1c8a1b8e1b1c8
                        pricingOptions:
                          type: array
                          items:
                            type: object
                            properties:
                              _id:
                                type: string
                              label:
                                type: string
                                example: 1 BHK Cleaning
                              price:
                                type: number
                                minimum: 0
                                example: 1000
                              duration:
                                type: number
                                minimum: 0
                                example: 60
                        image:
                          type: string
                          example: 'https://res.cloudinary.com/example/image.jpg'
                        media:
                          type: array
                          maxItems: 5
                          items:
                            type: string
                            example: 'https://res.cloudinary.com/example/media1.jpg'
                        avgRating:
                          type: number
                          minimum: 0
                          maximum: 5
                          example: 4.5
                        ratingsCount:
                          type: number
                          minimum: 0
                          example: 120
                        isActive:
                          type: boolean
                          example: true
                        isFeatured:
                          type: boolean
                          example: false
                        serviceableAreas:
                          type: array
                          items:
                            type: object
                            properties:
                              _id:
                                type: string
                                example: 68e3f964c615c935d6d756bf
                              name:
                                type: string
                                example: Kothrud
                              pincodes:
                                type: array
                                items:
                                  type: number
                                example:
                                  - 411038
                                  - 411029
                              metadata:
                                type: object
                                properties:
                                  totalSubAreas:
                                    type: number
                                    example: 15
                                  district:
                                    type: string
                                    example: Pune
                        serviceableCities:
                          type: array
                          items:
                            type: object
                            properties:
                              _id:
                                type: string
                                example: 68e3f7dbf622c4a8249b844b
                              name:
                                type: string
                                example: Pune
                              state:
                                type: string
                                example: Maharashtra
                        locationAvailable:
                          type: array
                          deprecated: true
                          items:
                            type: object
                            properties:
                              city:
                                type: string
                              state:
                                type: string
                              coordinates:
                                type: object
                                properties:
                                  lan:
                                    type: number
                                  lat:
                                    type: number
                        createdAt:
                          type: string
                          format: date-time
                          example: '2024-01-15T10:30:00.000Z'
                        updatedAt:
                          type: string
                          format: date-time
                          example: '2024-01-15T12:45:00.000Z'
                  message:
                    type: string
  '/services/{serviceId}/image':
    get:
      summary: Get service image by ID
      tags:
        - Service
      parameters:
        - in: path
          name: serviceId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Service image retrieved successfully
          content:
            image/png:
              schema:
                type: string
                format: binary
  /services/check-availability:
    get:
      summary: Check service availability by pincode
      tags:
        - Service
      parameters:
        - in: query
          name: pincode
          required: true
          schema:
            type: number
          description: Pincode to check availability
          example: 411038
      responses:
        '200':
          description: Availability checked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      available:
                        type: boolean
                        example: true
                      pincode:
                        type: string
                        example: '411038'
                      areas:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            name:
                              type: string
                            pincodes:
                              type: array
                              items:
                                type: number
                      services:
                        type: array
                        items:
                          $ref: '#/paths/~1services~1%7BserviceId%7D/get/responses/200/content/application~1json/schema/properties/data'
                      count:
                        type: number
                        example: 5
                  message:
                    type: string
  '/services/by-area/{areaId}':
    get:
      summary: Get services available in a specific area
      tags:
        - Service
      parameters:
        - in: path
          name: areaId
          required: true
          schema:
            type: string
          description: Area ObjectId
        - in: query
          name: categoryId
          schema:
            type: string
          description: Filter by category
        - in: query
          name: featured
          schema:
            type: boolean
          description: Filter featured services
        - in: query
          name: minPrice
          schema:
            type: number
        - in: query
          name: maxPrice
          schema:
            type: number
      responses:
        '200':
          description: Services retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/paths/~1services~1%7BserviceId%7D/get/responses/200/content/application~1json/schema/properties/data'
                  message:
                    type: string
  '/services/{serviceId}/areas':
    post:
      summary: Assign service to specific areas
      tags:
        - Service (Admin)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: serviceId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - areaIds
              properties:
                areaIds:
                  type: array
                  items:
                    type: string
                  example:
                    - 68e3f964c615c935d6d756bf
                    - 68e3f964c615c935d6d756c0
      responses:
        '200':
          description: Service assigned to areas successfully
    delete:
      summary: Remove service from specific areas
      tags:
        - Service (Admin)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: serviceId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - areaIds
              properties:
                areaIds:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Areas removed from service
  '/services/{serviceId}/city':
    post:
      summary: Assign service to entire city (all serviceable areas)
      tags:
        - Service (Admin)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: serviceId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cityId
              properties:
                cityId:
                  type: string
                  example: 68e3f7dbf622c4a8249b844b
      responses:
        '200':
          description: Service assigned to city successfully
  /categories:
    get:
      summary: Get all categories
      tags:
        - Categories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/paths/~1categories/post/responses/201/content/application~1json/schema/properties/data'
                  message:
                    type: string
    post:
      summary: Create a new category
      tags:
        - Categories
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                icon:
                  type: string
                  format: binary
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    required:
                      - name
                      - description
                      - icon
                    properties:
                      _id:
                        type: string
                        description: Category ID
                      name:
                        type: string
                      description:
                        type: string
                      icon:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
                      updatedAt:
                        type: string
                        format: date-time
                  message:
                    type: string
  /users/current-user:
    get:
      summary: Get current authenticated user's details
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
  /users/update-account:
    patch:
      summary: Update account details for the current user
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
                phoneNumber:
                  type: string
      responses:
        '200':
          description: Account details updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user: '$ref:''./../../schemas/User.yaml#/User'''
        '400':
          description: Bad request
  /users/avatar:
    patch:
      summary: Update the user's avatar
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        '200':
          description: Avatar image updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Avatar file is missing
  /applications/complete-application:
    post:
      summary: Create a new service area
      tags:
        - ServiceArea
      description: |
        **Note:** For `availableLocations` (array), you can send either:
        - Multiple fields: `-F 'availableLocations=ID1' -F 'availableLocations=ID2' ...` (recommended, best for backend)
        - Single comma-separated field: `-F 'availableLocations=ID1,ID2,ID3'` (what Swagger UI generates)

        Both formats are supported by the backend.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - service
                - availableLocations
              properties:
                service:
                  type: string
                  description: Service ObjectId
                  example: 68b0771e177a4c9f3a8ed011
                availableLocations:
                  type: array
                  items:
                    type: string
                    description: ObjectId referencing Area (not the areas field)
                  description: |
                    Array of ObjectIds referencing Area model. This is distinct from the `areas` field, which may be used for other purposes.

                    **Note:** For `availableLocations` (array), you can send either:
                    - Multiple fields: `-F 'availableLocations=ID1' -F 'availableLocations=ID2' ...` (recommended, best for backend)
                    - Single comma-separated field: `-F 'availableLocations=ID1,ID2,ID3'` (what Swagger UI generates)

                    Both formats are supported by the backend.
                  example:
                    - 68e7ab3e2e3114d1a26abf05
                    - 68e7ab3e2e3114d1a26abf06
                    - 68e7ab3e2e3114d1a26abf07
                aadhaarFrontImage:
                  type: string
                  format: binary
                  description: aadhaar front image file
                aadhaarBackImage:
                  type: string
                  format: binary
                  description: aadhaar back image file
                panImage:
                  type: string
                  format: binary
                  description: PAN image file
      responses:
        '201':
          description: Service area created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceArea'
        '400':
          description: Invalid input
        '500':
          description: Server error
    get:
      summary: Get all service areas (admin only)
      tags:
        - ServiceArea
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum:
              - pending
              - approved
              - rejected
              - suspended
          description: Filter by application status
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
          description: Results per page
      responses:
        '200':
          description: Service areas fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceArea'
        '400':
          description: Invalid filter
        '500':
          description: Server error
  '/applications/complete-application/{id}':
    get:
      summary: Get a single service area by ID
      tags:
        - ServiceArea
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Service area ObjectId
      responses:
        '200':
          description: Service area fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceArea'
        '400':
          description: Invalid ID
        '404':
          description: Service area not found
        '500':
          description: Server error
  '/applications/complete-application/{id}/status':
    patch:
      summary: Update service area status (admin only)
      tags:
        - ServiceArea
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Service area ObjectId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - applicationStatus
              properties:
                applicationStatus:
                  type: string
                  enum:
                    - pending
                    - approved
                    - rejected
                    - suspended
                  description: New status
                  example: approved
                adminNotes:
                  type: string
                  description: Optional admin notes
      responses:
        '200':
          description: Service area status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceArea'
        '400':
          description: Invalid status or ID
        '404':
          description: Service area not found
        '500':
          description: Server error
  '/applications/complete-application/provider/{id}':
    get:
      summary: Get all service areas by provider
      tags:
        - ServiceArea
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Provider ObjectId
      responses:
        '200':
          description: Service areas for provider fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceArea'
        '400':
          description: Invalid provider ID
        '404':
          description: Provider not found
        '500':
          description: Server error
  /bookings:
    post:
      summary: Create a new booking
      tags:
        - Bookings
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - serviceId
                - selectedPricingOption
                - scheduledDate
                - scheduledTime
                - paymentMethod
              properties:
                serviceId:
                  type: string
                selectedPricingOption:
                  type: string
                  description: The ObjectId of the chosen pricing option
                scheduledDate:
                  type: string
                  format: date
                scheduledTime:
                  type: string
                  format: time
                specialInstructions:
                  type: string
                location:
                  oneOf:
                    - type: string
                      description: Address ObjectId reference
                      example: 6503e2c1f1a2b3c4d5e6f7a8
                    - type: object
                      properties:
                        houseNo:
                          type: string
                        street:
                          type: string
                        city:
                          type: string
                        state:
                          type: string
                        pincode:
                          type: string
                        country:
                          type: string
                        latitude:
                          type: number
                          format: double
                        longitude:
                          type: number
                          format: double
                      required:
                        - houseNo
                        - street
                        - city
                        - state
                        - pincode
                        - country
                        - latitude
                        - longitude
                paymentMethod:
                  type: string
                  enum:
                    - cash
                    - online
      responses:
        '201':
          description: Booking created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      booking:
                        $ref: '#/components/schemas/Booking'
                      order:
                        type: object
                        nullable: true
                  message:
                    type: string
  /bookings/available:
    get:
      summary: Get available bookings for provider (approved applications)
      tags:
        - Bookings
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of available bookings
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      bookings:
                        type: array
                        items:
                          $ref: '#/components/schemas/Booking'
                  message:
                    type: string
  /bookings/history:
    get:
      summary: Get booking history for logged-in user
      tags:
        - Bookings
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
          required: false
          description: Filter bookings by status
      responses:
        '200':
          description: List of bookings
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      bookings:
                        type: array
                        items:
                          $ref: '#/components/schemas/Booking'
                  message:
                    type: string
  /bookings/accepted:
    get:
      summary: Get accepted bookings or booking history for provider
      tags:
        - Bookings
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
          required: false
          description: 'Filter bookings by status (booking-confirmed, booking-in-progress, booking-completed)'
      responses:
        '200':
          description: Accepted bookings/history retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      bookings:
                        type: array
                        items:
                          $ref: '#/components/schemas/Booking'
                  message:
                    type: string
        '401':
          description: Unauthorized
        '500':
          description: Server error
  /bookings/reject:
    post:
      summary: Provider rejects a booking (does not change booking status)
      description: |
        Provider can reject a booking. This does not change the booking status, but records the rejection for this provider. Rejected bookings will not be shown to this provider in getAvailableBookings.
      tags:
        - Bookings
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - bookingId
              properties:
                bookingId:
                  type: string
                  description: The ObjectId of the booking to reject
                reason:
                  type: string
                  description: Optional reason for rejection
      responses:
        '200':
          description: Booking rejected for this provider (not shown in available bookings)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Invalid request
        '404':
          description: Booking not found
        '500':
          description: Server error
  /bookings/accept:
    post:
      summary: Provider accepts a booking
      tags:
        - Bookings
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - bookingId
              properties:
                bookingId:
                  type: string
                  description: The ObjectId of the booking to accept
      responses:
        '200':
          description: Booking accepted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      booking:
                        $ref: '#/components/schemas/Booking'
                  message:
                    type: string
        '400':
          description: Invalid request or booking status
        '403':
          description: Provider not approved for this service
        '404':
          description: Booking not found
        '500':
          description: Server error
  '/bookings/{bookingId}':
    get:
      summary: Get booking by ID
      description: 'Retrieve a single booking by its ObjectId, including populated service, user, provider, and location details.'
      tags:
        - Bookings
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: bookingId
          required: true
          schema:
            type: string
          description: The ObjectId of the booking to retrieve
      responses:
        '200':
          description: Booking retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Booking'
                  message:
                    type: string
        '400':
          description: Invalid booking ID
        '404':
          description: Booking not found
        '500':
          description: Server error
  /addresses:
    get:
      summary: Get all addresses for the logged-in user
      tags:
        - Address
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of addresses
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Address'
                  message:
                    type: string
    post:
      summary: Add a new address
      tags:
        - Address
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        '201':
          description: Address created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Address'
                  message:
                    type: string
  '/addresses/{id}':
    get:
      summary: Get a single address by ID
      tags:
        - Address
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Address ID
      responses:
        '200':
          description: Address details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Address'
                  message:
                    type: string
    put:
      summary: Update an address
      tags:
        - Address
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Address ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        '200':
          description: Address updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Address'
                  message:
                    type: string
    delete:
      summary: Delete an address
      tags:
        - Address
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Address ID
      responses:
        '200':
          description: Address deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Address'
                  message:
                    type: string
  /auth/register:
    post:
      summary: Register a new user (role always 'user')
      description: |
        Register a new user. The role is always set to 'user' regardless of what is sent in the request. Use `/auth/register/provider` to register a provider.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                dateOfBirth:
                  type: string
                  format: date
                phoneNumber:
                  type: string
                avatar:
                  type: string
                  format: binary
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
                      role:
                        type: string
                      dateOfBirth:
                        type: string
                      isVerified:
                        type: boolean
                      isActive:
                        type: boolean
                      phoneNumber:
                        type: string
                  message:
                    type: string
  /auth/login:
    post:
      summary: Login user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
                  message:
                    type: string
  /auth/logout:
    post:
      summary: Logout user
      tags:
        - Auth
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                  message:
                    type: string
  /auth/login/provider:
    post:
      summary: Login provider
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Provider logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
                  message:
                    type: string
  /auth/refresh-token:
    post:
      summary: Refresh access token
      tags:
        - Auth
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Access token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
                  message:
                    type: string
  /auth/change-password:
    post:
      summary: Change current password
      tags:
        - Auth
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                  message:
                    type: string
  /auth/forgot-password:
    post:
      summary: Request password reset OTP
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Reset OTP sent to email
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      email:
                        type: string
                  message:
                    type: string
  /auth/reset-password:
    post:
      summary: Reset password using OTP
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                  message:
                    type: string
  /auth/verify-otp:
    post:
      summary: Verify OTP for password reset
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                otp:
                  type: string
      responses:
        '200':
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      email:
                        type: string
                  message:
                    type: string
  /auth/register/provider:
    post:
      summary: Register a new provider (role always 'provider')
      description: |
        Register a new provider. The role is always set to 'provider' regardless of what is sent in the request. PAN and aadhaar are not required at registration; they can be uploaded later. The profile will have `isProfileCompleted: false` until documents are uploaded.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                dateOfBirth:
                  type: string
                  format: date
                phoneNumber:
                  type: string
                avatar:
                  type: string
                  format: binary
      responses:
        '201':
          description: Provider registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
                      role:
                        type: string
                      dateOfBirth:
                        type: string
                      isVerified:
                        type: boolean
                      isActive:
                        type: boolean
                      phoneNumber:
                        type: string
                  message:
                    type: string
  /auth/provider/upload-documents:
    post:
      summary: Provider uploads PAN and aadhaar documents
      description: |
        Allows a provider to upload PAN and aadhaar images after registration. Sets `isProfileCompleted` to true when both are uploaded.
      tags:
        - Auth
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                aadhaarFrontImage:
                  type: string
                  format: binary
                aadhaarBackImage:
                  type: string
                  format: binary
                panImage:
                  type: string
                  format: binary
      responses:
        '200':
          description: Documents uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      isProfileCompleted:
                        type: boolean
                      aadhaar:
                        type: object
                      pan:
                        type: object
                  message:
                    type: string
  /webhook/razorpay:
    post:
      summary: Handle Razorpay webhook events
      description: Receives webhook events from Razorpay. No authentication required.
      tags:
        - Webhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Webhook processed successfully
        '400':
          description: Invalid payload
  /webhook/verify-payment:
    post:
      summary: Verify payment
      description: Verifies a payment after a transaction is completed. Requires JWT authentication.
      tags:
        - Webhook
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Payment verified successfully
        '400':
          description: Invalid or failed verification
        '401':
          description: Unauthorized
  '/webhook/payment-status/{bookingId}':
    get:
      summary: Get payment status
      description: Retrieves the payment status for a specific booking. Requires JWT authentication.
      tags:
        - Webhook
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: bookingId
          required: true
          schema:
            type: string
          description: The booking ID to check payment status for.
      responses:
        '200':
          description: Payment status retrieved successfully
        '400':
          description: Invalid booking ID
        '401':
          description: Unauthorized
  /location-import/cities:
    get:
      summary: List all cities
      tags:
        - LocationImport
      responses:
        '200':
          description: List of cities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'
  /location-import/import:
    post:
      summary: Import city data (admin only)
      tags:
        - LocationImport
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cityName:
                  type: string
                pincodeRanges:
                  type: array
                  items:
                    type: string
                centerCoords:
                  type: array
                  items:
                    type: number
      responses:
        '200':
          description: City data imported successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                  message:
                    type: string
  '/location-import/cities/{cityId}':
    get:
      summary: Get city by id
      tags:
        - LocationImport
      parameters:
        - in: path
          name: cityId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: City details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
  /location-import/areas:
    get:
      summary: List all areas
      tags:
        - LocationImport
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
          description: Items per page
      responses:
        '200':
          description: List of areas with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  areas:
                    type: array
                    items:
                      $ref: '#/components/schemas/Area'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      pages:
                        type: integer
        '404':
          description: Area not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  '/location-import/areas/{areaId}':
    get:
      summary: Get area by id
      tags:
        - LocationImport
      parameters:
        - in: path
          name: areaId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Area details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Area'
        '404':
          description: Area not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /location-import/subareas:
    get:
      summary: List all sub-areas
      tags:
        - LocationImport
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
          description: Items per page
      responses:
        '200':
          description: List of sub-areas with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  subAreas:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubArea'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      pages:
                        type: integer
        '404':
          description: SubArea not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  '/location-import/subareas/{subAreaId}':
    get:
      summary: Get sub-area by id
      tags:
        - LocationImport
      parameters:
        - in: path
          name: subAreaId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Sub-area details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubArea'
        '404':
          description: SubArea not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /location-import/pincodes:
    get:
      summary: List all pincodes
      tags:
        - LocationImport
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
          description: Items per page
      responses:
        '200':
          description: List of pincodes with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  pincodes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pincode'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      pages:
                        type: integer
        '404':
          description: Pincode not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  '/location-import/pincodes/{pincodeId}':
    get:
      summary: Get pincode by id
      tags:
        - LocationImport
      parameters:
        - in: path
          name: pincodeId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Pincode details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pincode'
        '404':
          description: Pincode not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  '/location-import/import-status/{importLogId}':
    get:
      summary: Get import status by log id
      tags:
        - LocationImport
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: importLogId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Import status retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  status:
                    type: object
  '/location-import/areas/{areaId}/subareas':
    get:
      summary: List sub-areas by area
      tags:
        - LocationImport
      parameters:
        - in: path
          name: areaId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Sub-areas listed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubArea'
  '/location-import/cities/{cityId}/areas':
    get:
      summary: List areas by city
      tags:
        - LocationImport
      parameters:
        - in: path
          name: cityId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Areas listed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Area'
  '/location-import/areas/{areaId}/serviceability':
    patch:
      summary: Update area serviceability (admin only)
      tags:
        - LocationImport
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: areaId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                serviceable:
                  type: boolean
      responses:
        '200':
          description: Area serviceability updated
  '/location-import/subareas/{subAreaId}/serviceability':
    patch:
      summary: Update sub-area serviceability (admin only)
      tags:
        - LocationImport
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: subAreaId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                serviceable:
                  type: boolean
      responses:
        '200':
          description: Sub-area serviceability updated
  /location-import/areas/bulk-serviceability:
    patch:
      summary: Bulk update area serviceability (admin only)
      tags:
        - LocationImport
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                areaIds:
                  type: array
                  items:
                    type: string
                serviceable:
                  type: boolean
      responses:
        '200':
          description: Bulk area serviceability updated
  '/location-import/pincode/{pincode}':
    get:
      summary: Get pincode details
      tags:
        - LocationImport
      parameters:
        - in: path
          name: pincode
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Pincode details
  /location-import/search:
    get:
      summary: 'Search locations (areas, subareas, pincodes)'
      tags:
        - LocationImport
      parameters:
        - in: query
          name: query
          schema:
            type: string
          description: Search query
      responses:
        '200':
          description: Search results
        '400':
          description: Bad Request - Query must be at least 2 characters
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  errors:
                    type: array
                    items:
                      type: string
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        email:
          type: string
        googleId:
          type: string
        fullName:
          type: string
        avatar:
          type: string
        password:
          type: string
        isActive:
          type: boolean
        isVerified:
          type: boolean
        role:
          type: string
          enum:
            - user
            - provider
            - admin
        aadhaar:
          type: object
          properties:
            frontImage:
              type: string
            backImage:
              type: string
            number:
              type: string
              maxLength: 12
            isVerified:
              type: boolean
        pan:
          type: object
          properties:
            link:
              type: string
            number:
              type: string
              maxLength: 10
            isVerified:
              type: boolean
        refreshToken:
          type: string
    Service:
      $ref: '#/paths/~1services~1%7BserviceId%7D/get/responses/200/content/application~1json/schema/properties/data/Service'
    ServiceArea:
      type: object
      properties:
        _id:
          type: string
          format: objectId
          description: Unique identifier for the service area.
        provider:
          type: string
          format: objectId
          description: Reference to the User who is the provider.
        service:
          type: string
          format: objectId
          description: Reference to the Service being applied for.
        availableLocations:
          type: array
          items:
            type: string
            format: objectId
            description: ObjectId referencing Area (not the areas field)
          description: |
            Array of ObjectIds referencing Area model. This is distinct from the `areas` field, which may be used for other purposes.

            **Note:** For `availableLocations` (array), you can send either:
            - Multiple fields: `-F 'availableLocations=ID1' -F 'availableLocations=ID2' ...` (recommended, best for backend)
            - Single comma-separated field: `-F 'availableLocations=ID1,ID2,ID3'` (what Swagger UI generates)

            Both formats are supported by the backend.
          example:
            - '650000000000000000000001'
            - '650000000000000000000002'
        applicationStatus:
          type: string
          enum:
            - pending
            - approved
            - rejected
            - suspended
          default: pending
          description: Status of the service area.
        adminNotes:
          type: string
          description: Notes from the admin regarding the service area.
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the service area was created.
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the service area was last updated.
      required:
        - provider
        - service
        - applicationStatus
    Booking:
      type: object
      properties:
        _id:
          type: string
        user:
          type: string
        provider:
          type: string
        service:
          type: string
        selectedPricingOption:
          type: string
          description: ID of the chosen pricing option
        bookingStatus:
          type: string
          enum:
            - pending
            - confirmed
            - in-progress
            - completed
            - cancelled
            - rejected
        scheduledDate:
          type: string
          format: date
        scheduledTime:
          type: string
          example: '14:30'
        location:
          type: object
          properties:
            address:
              type: string
            city:
              type: string
            state:
              type: string
            pincode:
              type: string
            coordinates:
              type: object
              properties:
                lan:
                  type: number
                lat:
                  type: number
        pricing:
          type: object
          properties:
            basePrice:
              type: number
            additionalCharges:
              type: number
            discount:
              type: number
            totalAmount:
              type: number
        payment:
          type: object
          properties:
            paymentMethod:
              type: string
              enum:
                - razorpay
                - cash
                - upi
                - card
            status:
              type: string
              enum:
                - pending
                - completed
                - failed
                - refunded
            orderId:
              type: string
            paymentId:
              type: string
            paidAmount:
              type: number
            paymentDate:
              type: string
              format: date-time
            refundId:
              type: string
            refundAmount:
              type: number
            refundDate:
              type: string
              format: date-time
        specialInstructions:
          type: string
        cancellationReason:
          type: string
        rejectionReason:
          type: string
        completedAt:
          type: string
          format: date-time
        cancelledAt:
          type: string
          format: date-time
        rating:
          type: number
          minimum: 1
          maximum: 5
        review:
          type: string
        reviewDate:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - user
        - service
        - bookingStatus
        - scheduledDate
        - scheduledTime
        - pricing
        - payment
    Address:
      type: object
      properties:
        fullName:
          type: string
        phone:
          type: string
          format: phone
        houseNo:
          type: string
        street:
          type: string
        city:
          type: string
        state:
          type: string
        pincode:
          type: string
        country:
          type: string
        coordinates:
          type: object
          properties:
            latitude:
              type: number
            longitude:
              type: number
        isDefault:
          type: boolean
          default: false
        addressType:
          type: string
          enum:
            - Home
            - Work
            - Other
          default: Other
      required:
        - street
        - city
        - state
        - pincode
        - country
        - coordinates
        - houseNo
        - fullName
        - phone
    City:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        state:
          type: string
        country:
          type: string
        pincodeRanges:
          type: array
          items:
            type: string
        centerCoords:
          type: array
          items:
            type: number
            description:
              - latitude
              - longitude
      required:
        - name
        - state
        - country
        - pincodeRanges
        - centerCoords
    Area:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        city:
          type: string
          description: City ObjectId reference
        pincode:
          type: string
        serviceable:
          type: boolean
          default: true
        coordinates:
          type: object
          properties:
            latitude:
              type: number
            longitude:
              type: number
      required:
        - name
        - city
        - pincode
        - serviceable
        - coordinates
    SubArea:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        area:
          type: string
          description: Area ObjectId reference
        serviceable:
          type: boolean
          default: true
        coordinates:
          type: object
          properties:
            latitude:
              type: number
            longitude:
              type: number
      required:
        - name
        - area
        - serviceable
        - coordinates
    Pincode:
      type: object
      properties:
        _id:
          type: string
        code:
          type: string
        city:
          type: string
          description: City ObjectId reference
        area:
          type: string
          description: Area ObjectId reference
        isServiceable:
          type: boolean
          default: true
      required:
        - code
        - city
        - area
        - isServiceable
