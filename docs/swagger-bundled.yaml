openapi: 3.0.3
info:
  title: Service API
  version: 1.0.0
  description: API for service management and retrieval
servers:
  - url: 'http://localhost:8000/api/v1'
    description: Local development server
tags:
  - name: Auth
    description: Authentication management
  - name: Categories
    description: Category management
  - name: Service
    description: Service management and retrieval
  - name: User
    description: User management and retrieval
  - name: ProviderApplication
    description: Provider application management
paths:
  /services:
    post:
      summary: Create a new service
      tags:
        - Service
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - title
                - description
                - category
                - price
                - duration
              properties:
                title:
                  type: string
                  description: Service title
                  example: Home Cleaning
                description:
                  type: string
                  description: Service description
                  example: Professional home cleaning service
                category:
                  type: string
                  description: Category ObjectId
                  example: 60f7c0b8e1b1c8a1b8e1b1c8
                price:
                  type: number
                  description: Service price
                  example: 1000
                duration:
                  type: number
                  description: Duration in minutes
                  example: 60
                icon:
                  type: string
                  format: binary
                  description: Icon image file (optional)
                media:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Up to 5 media files (optional)
                locationAvailable:
                  type: string
                  description: |
                    JSON stringified array of locations, e.g. '[{"city":"City","state":"State","coordinates":{"lan":77.1,"lat":28.6}}]'
      responses:
        '201':
          description: Service created successfully
        '400':
          description: Invalid input
        '500':
          description: Server error
    get:
      summary: Get all services with optional filters
      tags:
        - Service
      parameters:
        - in: query
          name: categoryId
          schema:
            type: string
          description: The ObjectId of the category
        - in: query
          name: minPrice
          schema:
            type: number
          description: Minimum price
        - in: query
          name: maxPrice
          schema:
            type: number
          description: Maximum price
        - in: query
          name: avgRating
          schema:
            type: number
          description: Minimum average rating
        - in: query
          name: isFeatured
          schema:
            type: boolean
          description: Filter for featured services
        - in: query
          name: city
          schema:
            type: string
          description: Filter by city (locationAvailable)
        - in: query
          name: state
          schema:
            type: string
          description: Filter by state (locationAvailable)
        - in: query
          name: lan
          schema:
            type: number
          description: Filter by longitude (locationAvailable.coordinates.lan)
        - in: query
          name: lat
          schema:
            type: number
          description: Filter by latitude (locationAvailable.coordinates.lat)
      responses:
        '200':
          description: Services retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      Service:
                        type: object
                        properties:
                          _id:
                            type: string
                          title:
                            type: string
                            maxLength: 100
                          description:
                            type: string
                          category:
                            type: string
                          price:
                            type: number
                            minimum: 0
                          duration:
                            type: number
                            minimum: 0
                          media:
                            type: array
                            maxItems: 5
                            items:
                              type: string
                          avgRating:
                            type: number
                            minimum: 0
                            maximum: 5
                          ratingsCount:
                            type: number
                            minimum: 0
                          isActive:
                            type: boolean
                          isFeatured:
                            type: boolean
                          locationAvailable:
                            type: array
                            items:
                              type: object
                              properties:
                                city:
                                  type: string
                                state:
                                  type: string
                                coordinates:
                                  type: object
                                  properties:
                                    lan:
                                      type: number
                                    lat:
                                      type: number
                          createdAt:
                            type: string
                            format: date-time
                          updatedAt:
                            type: string
                            format: date-time
                  message:
                    type: string
                    example: Services retrieved successfully
        '400':
          description: Invalid filter
        '404':
          description: No services found
        '500':
          description: Server error
  /services/featured-services:
    get:
      summary: Get featured services
      tags:
        - Service
      responses:
        '200':
          description: Featured services retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      $ref: '#/paths/~1services/get/responses/200/content/application~1json/schema/properties/data/items'
                  message:
                    type: string
                    example: Featured services retrieved successfully
        '500':
          description: Server error
  /categories:
    get:
      summary: Get all categories
      tags:
        - Categories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/paths/~1categories/post/responses/201/content/application~1json/schema/properties/data'
                  message:
                    type: string
    post:
      summary: Create a new category
      tags:
        - Categories
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                icon:
                  type: string
                  format: binary
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    required:
                      - name
                      - description
                      - icon
                    properties:
                      _id:
                        type: string
                        description: Category ID
                      name:
                        type: string
                      description:
                        type: string
                      icon:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
                      updatedAt:
                        type: string
                        format: date-time
                  message:
                    type: string
  /users/current-user:
    get:
      summary: Get current authenticated user's details
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
  /users/update-account:
    patch:
      summary: Update account details for the current user
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
                phoneNumber:
                  type: string
      responses:
        '200':
          description: Account details updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user: '$ref:''./../../schemas/User.yaml#/User'''
        '400':
          description: Bad request
  /users/avatar:
    patch:
      summary: Update the user's avatar
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        '200':
          description: Avatar image updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Avatar file is missing
  /provider-applications:
    post:
      summary: Create a new provider application
      tags:
        - ProviderApplication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - provider
                - service
              properties:
                provider:
                  type: string
                  description: Provider User ObjectId
                  example: 60f7c0b8e1b1c8a1b8e1b1c8
                service:
                  type: string
                  description: Service ObjectId
                  example: 60f7c0b8e1b1c8a1b8e1b1c9
      responses:
        '201':
          description: Provider application created successfully
        '400':
          description: Invalid input
        '500':
          description: Server error
    get:
      summary: Get all provider applications (admin only)
      tags:
        - ProviderApplication
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum:
              - pending
              - approved
              - rejected
              - suspended
          description: Filter by application status
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
          description: Results per page
      responses:
        '200':
          description: Applications fetched successfully
        '400':
          description: Invalid filter
        '500':
          description: Server error
  '/provider-applications/{id}':
    get:
      summary: Get a single provider application by ID
      tags:
        - ProviderApplication
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Provider application ObjectId
      responses:
        '200':
          description: Application fetched successfully
        '400':
          description: Invalid ID
        '404':
          description: Provider application not found
        '500':
          description: Server error
  '/provider-applications/{id}/status':
    patch:
      summary: Update application status (admin only)
      tags:
        - ProviderApplication
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Provider application ObjectId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - applicationStatus
              properties:
                applicationStatus:
                  type: string
                  enum:
                    - pending
                    - approved
                    - rejected
                    - suspended
                  description: New status
                  example: approved
                adminNotes:
                  type: string
                  description: Optional admin notes
      responses:
        '200':
          description: Application status updated successfully
        '400':
          description: Invalid status or ID
        '404':
          description: Provider application not found
        '500':
          description: Server error
  /bookings:
    post:
      summary: Create a new booking
      tags:
        - Bookings
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                serviceId:
                  type: string
                scheduledDate:
                  type: string
                  format: date
                scheduledTime:
                  type: string
                  format: time
                specialInstructions:
                  type: string
                location:
                  type: object
                  properties:
                    address:
                      type: string
                    city:
                      type: string
                    state:
                      type: string
                    pincode:
                      type: string
                    coordinates:
                      type: array
                      items:
                        type: number
                paymentMethod:
                  type: string
                  enum:
                    - cash
                    - online
      responses:
        '201':
          description: Booking created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      booking:
                        $ref: '#/components/schemas/Booking'
                      order:
                        type: object
                        nullable: true
                  message:
                    type: string
  /bookings/available:
    get:
      summary: Get available bookings for provider (approved applications)
      tags:
        - Bookings
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of available bookings
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      bookings:
                        type: array
                        items:
                          $ref: '#/components/schemas/Booking'
                  message:
                    type: string
  /bookings/history:
    get:
      summary: Get booking history for logged-in user
      tags:
        - Bookings
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
          required: false
          description: Filter bookings by status
      responses:
        '200':
          description: List of bookings
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      bookings:
                        type: array
                        items:
                          $ref: '#/components/schemas/Booking'
                  message:
                    type: string
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                role:
                  type: string
                  enum:
                    - user
                    - provider
                    - admin
                dateOfBirth:
                  type: string
                  format: date
                phoneNumber:
                  type: string
                avatar:
                  type: string
                  format: binary
                aadharImage:
                  type: string
                  format: binary
                panImage:
                  type: string
                  format: binary
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
                      role:
                        type: string
                      dateOfBirth:
                        type: string
                      isVerified:
                        type: boolean
                      isActive:
                        type: boolean
                      phoneNumber:
                        type: string
                  message:
                    type: string
  /auth/login:
    post:
      summary: Login user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
                  message:
                    type: string
  /auth/logout:
    post:
      summary: Logout user
      tags:
        - Auth
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                  message:
                    type: string
  /auth/refresh-token:
    post:
      summary: Refresh access token
      tags:
        - Auth
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Access token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
                  message:
                    type: string
  /auth/change-password:
    post:
      summary: Change current password
      tags:
        - Auth
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                  message:
                    type: string
  /auth/forgot-password:
    post:
      summary: Request password reset OTP
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Reset OTP sent to email
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      email:
                        type: string
                  message:
                    type: string
  /auth/reset-password:
    post:
      summary: Reset password using OTP
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                  message:
                    type: string
  /auth/verify-otp:
    post:
      summary: Verify OTP for password reset
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                otp:
                  type: string
      responses:
        '200':
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      email:
                        type: string
                  message:
                    type: string
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        email:
          type: string
        googleId:
          type: string
        fullName:
          type: string
        avatar:
          type: string
        password:
          type: string
        isActive:
          type: boolean
        isVerified:
          type: boolean
        role:
          type: string
          enum:
            - user
            - provider
            - admin
        aadhar:
          type: object
          properties:
            link:
              type: string
            number:
              type: string
              maxLength: 12
            isVerified:
              type: boolean
        pan:
          type: object
          properties:
            link:
              type: string
            number:
              type: string
              maxLength: 10
            isVerified:
              type: boolean
        refreshToken:
          type: string
    Service:
      $ref: '#/paths/~1services/get/responses/200/content/application~1json/schema/properties/data/items/Service'
    providerApplication:
      type: object
      properties:
        _id:
          type: string
          format: objectId
          description: Unique identifier for the provider application.
        provider:
          type: string
          format: objectId
          description: Reference to the User who is the provider.
        service:
          type: string
          format: objectId
          description: Reference to the Service being applied for.
        applicationStatus:
          type: string
          enum:
            - pending
            - approved
            - rejected
            - suspended
          default: pending
          description: Status of the application.
        adminNotes:
          type: string
          description: Notes from the admin regarding the application.
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the application was created.
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the application was last updated.
      required:
        - provider
        - service
        - applicationStatus
    Booking:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        service_id:
          type: string
        provider_id:
          type: string
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        status:
          type: string
          enum:
            - pending
            - confirmed
            - cancelled
      required:
        - id
        - user_id
        - listing_id
        - start_date
        - end_date
        - status
